---
- case: numbers
  main: |
    from loguru import logger

    logger.info(123)
    logger.debug(123.3)
    logger.trace(1)
    logger.error(.3)
- case: containers
  main: |
    from loguru import logger

    logger.info(["096", 682, 173, 3125])
    logger.debug({"093": "Red Sea Object", 55: ["unknown"], 106: "The Old Man"})
    logger.debug({914, "taboo", 3008, 999})
- case: variables_str_no_args
  parametrized:
    - level: info
    - level: debug
    - level: warning
    - level: error
    - level: trace
    - level: exception
  main: |
    from loguru import logger

    foo = "bar"
    logger.{{ level }}(foo)
- case: variables__type-checked__wrong
  main: |
    from loguru import logger
    from typing_extensions import Final

    foo: Final = "bar"
    logger.info(foo, 1)
  out: |
    main:5: error: Not all arguments converted during string formatting  [str-format]
- case: variables__type-checked__correct
  main: |
    from loguru import logger
    from typing_extensions import Final

    foo: Final = "bar {}"
    logger.info(foo, 1)
- case: variables__mypy_cant_tell
  main: |
    from loguru import logger
    from typing_extensions import Final

    foo = "bar"
    logger.info(foo, 1)  # This is wrong but mypy is at a loss
- case: variables__type-checked__non-string
  main: |
    from loguru import logger
    from typing_extensions import Final

    foo: Final = 123.4
    logger.info(foo, 1)
  out: |
    main:5: error: No overload variant of "info" of "Logger" matches argument types "float", "int"  [call-overload]
    main:5: note:     <1 more non-matching overload not shown>
    main:5: note:     def info(__self, str, *args: Any, **kwargs: Any) -> None
    main:5: note: Possible overload variant:
